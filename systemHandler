import os
import re
import logging
import subprocess
import pymysql
import traceback
from typing import List, Optional, Dict, Any
from datetime import datetime
import json

from langchain_community.utilities import SQLDatabase
from langchain_community.llms import Ollama
from langchain.chains import create_sql_query_chain

class SystemReportAnalyzer:
    def __init__(self, report_path: str = None):
        self.report_path = report_path
        self.report_content = ""
        self.llm = None
        self.db = None
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
    def load_report(self, path: str = None):
        """Load the system report from a file"""
        if path:
            self.report_path = path
            
        if not self.report_path:
            raise ValueError("No report path provided")
            
        try:
            with open(self.report_path, 'r') as f:
                self.report_content = f.read()
            self.logger.info(f"Successfully loaded report from {self.report_path}")
        except Exception as e:
            self.logger.error(f"Failed to load report: {str(e)}")
            raise
            
    def connect_to_llm(self, model_name: str = "myllm:latest"):
        """Connect to the local Ollama LLM"""
        try:
            self.llm = Ollama(model=model_name)
            self.logger.info(f"Connected to LLM model: {model_name}")
        except Exception as e:
            self.logger.error(f"Failed to connect to LLM: {str(e)}")
            raise
            
    def analyze_report(self, query: str):
        """Analyze the report content using the LLM"""
        if not self.llm:
            raise RuntimeError("LLM not connected. Please connect first.")
            
        if not self.report_content:
            raise RuntimeError("Report not loaded. Please load first.")
            
        try:
            # Combine the report and query into a prompt
            prompt = f"""
            System Report Analysis Task:
            
            Below is a system report from a Red Hat Enterprise Linux server:
            {self.report_content[:10000]}... [truncated if too long]
            
            Question: {query}
            
            Please analyze the report and provide a detailed answer to the question.
            """
            
            response = self.llm(prompt)
            return response.strip()
        except Exception as e:
            self.logger.error(f"Analysis failed: {str(e)}")
            raise
            
    def interactive_session(self):
        """Start an interactive terminal session"""
        print("\n" + "="*50)
        print("System Report Analyzer")
        print("="*50 + "\n")
        
        # Load the report
        if not self.report_content:
            report_path = input("Enter path to system report file (or press Enter to use default): ").strip()
            if report_path:
                self.load_report(report_path)
            else:
                self.load_report()
                
        # Connect to LLM
        model_name = input("Enter Ollama model name (default: myllm:latest): ").strip() or "myllm:latest"
        self.connect_to_llm(model_name)
        
        print("\nConnected to LLM and loaded report successfully.")
        print("Type 'exit' to quit the session.\n")
        
        # Main interaction loop
        while True:
            try:
                query = input("Your question about the system report: ").strip()
                
                if query.lower() in ['exit', 'quit']:
                    print("Exiting...")
                    break
                    
                if not query:
                    print("Please enter a question.")
                    continue
                    
                print("\nAnalyzing...\n")
                response = self.analyze_report(query)
                print("\nAnalysis Result:")
                print("-"*50)
                print(response)
                print("-"*50 + "\n")
                
            except KeyboardInterrupt:
                print("\nExiting...")
                break
            except Exception as e:
                self.logger.error(f"Error during interaction: {str(e)}")
                print(f"An error occurred: {str(e)}")

def main():
    analyzer = SystemReportAnalyzer()
    
    # You can pre-load a report if you want
    # analyzer.load_report("path/to/your/report.txt")
    
    try:
        analyzer.interactive_session()
    except Exception as e:
        print(f"Fatal error: {str(e)}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
