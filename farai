import os
import re
import logging
import pymysql
import traceback
from typing import List, Optional, Dict, Any
from datetime import datetime
import json

from langchain_community.utilities import SQLDatabase
from langchain_ollama import OllamaLLM
from langchain.chains import create_sql_query_chain

# --- FAR DETAILS CONFIGURATION ---
FAR_DB_CONFIG = {
    "name": "FAR Details",
    "db_config": {
        "host": "localhost", 
        "user": "root", 
        "password": "root123", 
        "database": "EIS_n"
    },
    "include_tables": ["FarDetailsAll"],
}

# Blocked patterns for security
BLOCKED_PATTERNS = [
    r"\brm\b", r"\bkill\b", r"\breboot\b", r"\bshutdown\b", r"\buserdel\b",
    r"\bpasswd\b", r"\bmkfs\b", r"\bwget\b", r"\bcurl\b", r":\s*(){:|:&};:",
    r"\bsudo\b", r"\bsu\b", r"\bchmod\b", r"\bchown\b", r"\bdd\b",
    r"\bmount\s+/", r"\bumount\b", r"\bfdisk\b", r"\bparted\b", r"\bmkfs\b",
    r"\biptables\b", r"\bufw\b", r"\bfirewall\b", r"\bselinux\b"
]

# Setup logging
logging.basicConfig(
    filename=os.path.expanduser("~/.far_details_ai.log"),
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def is_dangerous(text: str) -> bool:
    """Check if text contains dangerous patterns"""
    return any(re.search(pattern, text.lower()) for pattern in BLOCKED_PATTERNS)

def clean_sql(raw_sql: str) -> str:
    """Clean and enhance SQL for LIKE operations"""
    match = re.search(r"```sql\s*(.*?)\s*```", raw_sql, re.DOTALL | re.IGNORECASE)
    if match:
        sql = match.group(1)
    else:
        sql = re.sub(r"```", "", raw_sql)
        sql = re.sub(r"^(.*?)(SELECT|INSERT|UPDATE|DELETE|WITH)", r"\2", sql, flags=re.IGNORECASE | re.DOTALL)
    
    sql = re.sub(r"(\w+)\s*=\s*'([^']*)'", r"\1 LIKE '%\2%'", sql, flags=re.IGNORECASE)
    sql = re.sub(r"(\w+)\s*=\s*\"([^\"]*)\"", r"\1 LIKE '%\2%'", sql, flags=re.IGNORECASE)
    return sql.strip().rstrip(";")

def format_answer(result: List[tuple], columns: Optional[List[str]] = None) -> str:
    """Format database results for display"""
    if not result:
        return "No FAR details found for your request."
    
    if len(result) == 1 and len(result[0]) == 1:
        return f"Result: {result[0][0]}"
    
    if columns and len(result) <= 10:
        output = []
        col_widths = [max(len(str(col)), max(len(str(row[i])) for row in result)) for i, col in enumerate(columns)]
        header = " | ".join(col.ljust(width) for col, width in zip(columns, col_widths))
        separator = "-+-".join("-" * width for width in col_widths)
        output.append(header)
        output.append(separator)
        for row in result[:10]:
            formatted_row = " | ".join(str(val).ljust(width) for val, width in zip(row, col_widths))
            output.append(formatted_row)
        if len(result) > 10:
            output.append(f"... and {len(result) - 10} more rows")
        return "\n".join(output)
    
    rows = []
    for row in result[:20]:
        rows.append(" | ".join(str(val) for val in row))
    if len(result) > 20:
        rows.append(f"... and {len(result) - 20} more rows")
    return "\n".join(rows)

def is_select_query(sql: str) -> bool:
    """Check if query is a safe SELECT query"""
    return sql.strip().lower().startswith('select')

class FarDetailsAssistant:
    def __init__(self):
        self.llm = None
        self.db_handler = None
        self.initialized = False
        self.chat_history = []

    def initialize(self):
        """Initialize the FAR Details Assistant"""
        try:
            self.llm = OllamaLLM(model="myllm:latest", temperature=0.1)
            
            db_cfg = FAR_DB_CONFIG['db_config']
            uri = f"mysql+pymysql://{db_cfg['user']}:{db_cfg['password']}@{db_cfg['host']}/{db_cfg['database']}"
            db_for_llm = SQLDatabase.from_uri(uri, include_tables=FAR_DB_CONFIG.get("include_tables"))
            
            chain = create_sql_query_chain(self.llm, db_for_llm)
            db_conn = pymysql.connect(**db_cfg)
            
            self.db_handler = {
                'chain': chain,
                'connection': db_conn,
                'config': FAR_DB_CONFIG
            }
            
            self.initialized = True
            return True
            
        except Exception as e:
            logger.error(f"Initialization failed: {e}", exc_info=True)
            return False

    def query_far_details(self, question: str) -> str:
        """Query FAR details database"""
        if not self.db_handler:
            return "FAR Details database not available."
        
        try:
            enhanced_question = f"""
            {question}
            
            Important: When searching for FAR details, processes, or any text fields, use LIKE with wildcards (%) instead of exact matches (=). 
            For example: 
            - Use "process_name LIKE '%web%'" instead of "process_name = 'web'"
            - Use "details LIKE '%error%'" instead of "details = 'error'"
            - Use "status LIKE '%active%'" instead of "status = 'active'"
            
            Focus on the FarDetailsAll table for process information.
            """

            raw_sql = self.db_handler['chain'].invoke({"question": enhanced_question})
            sql = clean_sql(raw_sql)

            if not is_select_query(sql):
                return "Only SELECT queries are allowed for security."
            
            with self.db_handler['connection'].cursor() as cursor:
                cursor.execute(sql)
                result = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description] if cursor.description else None
            
            if not result:
                return "No FAR details found matching your query."
            
            formatted_result = format_answer(result, columns)
            
            # Send the original question again with the results for accurate interpretation
            context = f"""
Original question: {question}

Database query results:
{formatted_result}

Please provide a clear, concise answer to the original question based on these results.
"""
            
            ai_interpretation = self.llm.invoke(context)
            return ai_interpretation
            
        except Exception as e:
            logger.error(f"FAR details query error: {e}")
            return f"Unable to retrieve FAR details: {e}"

    def process_question(self, question: str) -> str:
        """Process all questions as FAR-related queries"""
        if not self.initialized:
            return "FAR Details Assistant not initialized."
        
        if is_dangerous(question):
            return "Question blocked for security reasons."
        
        return self.query_far_details(question)

    def start_interactive_session(self):
        """Start interactive session"""
        if not self.initialize():
            return
        
        print("FAR Details Assistant ready. Enter your query or 'exit' to quit.")
        
        while True:
            try:
                question = input("Query: ").strip()
                if not question:
                    continue
                
                if question.lower() in ['exit', 'quit', 'q']:
                    break
                
                response = self.process_question(question)
                print(f"\n{response}\n")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"Error: {e}")
                logger.error(f"Session error: {e}", exc_info=True)
        
        if self.db_handler and self.db_handler['connection'].open:
            self.db_handler['connection'].close()

def main():
    assistant = FarDetailsAssistant()
    assistant.start_interactive_session()

if __name__ == "__main__":
    main()
