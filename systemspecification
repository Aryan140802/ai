#!/usr/bin/env python3
import os
import subprocess
import time
from datetime import datetime

def get_timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def run_command(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
                              text=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"Error: {e.stderr.strip()}"

def format_section(title, content):
    """Format a section with consistent headers and spacing"""
    return f"\n=== {title.upper()} ===\n\n{content}\n"

def get_system_info():
    sections = []
    
    # Header with timestamp
    sections.append(f"=== RED HAT SYSTEM REPORT ===\nGenerated: {get_timestamp()}\n")
    
    # 1. System overview
    sections.append(format_section("System Overview", 
        f"OS Release: {run_command('cat /etc/redhat-release')}\n"
        f"Kernel Info: {run_command('uname -a')}\n"
        f"Uptime: {run_command('uptime')}\n"
        f"Load Average: {run_command('cat /proc/loadavg')}"))
    
    # 2. Hardware information
    sections.append(format_section("Hardware Information",
        f"CPU Architecture:\n{run_command('lscpu')}\n\n"
        f"CPU Frequency:\n{run_command('cpupower frequency-info')}"))
    
    # 3. Resource utilization
    sections.append(format_section("Resource Utilization",
        f"CPU Usage (mpstat):\n{run_command('mpstat -P ALL 1 1')}\n\n"
        f"Memory Usage:\n{run_command('free -h')}\n\n"
        f"Top Processes by CPU:\n{run_command('ps -eo pid,comm,%cpu,%mem --sort=-%cpu | head -n 10')}\n\n"
        f"Top Processes by Memory:\n{run_command('ps -eo pid,comm,%mem,%cpu --sort=-%mem | head -n 10')}"))
    
    # 4. Storage information
    sections.append(format_section("Storage Information",
        f"Disk Usage:\n{run_command('df -hT')}\n\n"
        f"LVM Overview:\n{run_command('vgs && lvs')}\n\n"
        f"Large Directories:\n{run_command('du -sh /* 2>/dev/null | sort -rh | head -n 15')}"))
    
    # 5. Services and daemons
    sections.append(format_section("Services Status",
        f"Running Services:\n{run_command('systemctl list-units --type=service --state=running --no-pager')}\n\n"
        f"Failed Services:\n{run_command('systemctl --failed --no-pager')}"))
    
    # 6. Network information
    sections.append(format_section("Network Information",
        f"Active Connections:\n{run_command('ss -tulnp')}\n\n"
        f"Firewall Status:\n{run_command('sudo firewall-cmd --state')}\n\n"
        f"Network Interfaces:\n{run_command('ip -br addr show')}"))
    
    # 7. Security information
    sections.append(format_section("Security Information",
        f"SELinux Status:\n{run_command('sestatus')}\n\n"
        f"Last Auth Logs:\n{run_command('journalctl -u sshd --since "1 hour ago" --no-pager | tail -n 20')}"))
    
    # 8. Updates and packages
    sections.append(format_section("Updates Information",
        f"Available Updates:\n{run_command('sudo dnf check-update || sudo yum check-update')}"))
    
    # 9. System messages
    sections.append(format_section("System Messages",
        f"Recent Kernel Messages:\n{run_command('journalctl -k --since "1 hour ago" --no-pager | tail -n 20')}"))
    
    return "\n".join(sections)

def save_to_file(content, filename=None):
    if not filename:
        filename = f"system_report_llm_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(filename, 'w') as f:
        f.write(content)
    
    return filename

def main():
    print("Generating LLM-friendly system report...")
    start_time = time.time()
    
    report = get_system_info()
    output_file = save_to_file(report)
    
    print(f"\nReport generated in {time.time()-start_time:.2f} seconds")
    print(f"Saved to: {os.path.abspath(output_file)}")
    
    # Print summary
    print("\n=== REPORT SUMMARY ===")
    print(f"Generated at: {get_timestamp()}")
    print(f"File size: {os.path.getsize(output_file)/1024:.1f} KB")
    print(f"Section count: {report.count('===')//2}")

if __name__ == "__main__":
    main()
