#!/usr/bin/env python3
import os
import subprocess
import time
from datetime import datetime

def get_timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def run_command(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
                              text=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"Error: {e.stderr.strip()}"

def format_table(title, headers, rows):
    """Format data as a markdown-style table"""
    # Calculate column widths
    col_widths = [len(header) for header in headers]
    for row in rows:
        for i, cell in enumerate(row):
            col_widths[i] = max(col_widths[i], len(str(cell)))
    
    # Build table
    separator = "+" + "+".join(["-"*(w+2) for w in col_widths]) + "+"
    header_row = "| " + " | ".join([h.ljust(col_widths[i]) for i, h in enumerate(headers)]) + " |"
    table = [f"\n=== {title.upper()} ===", separator, header_row, separator]
    
    for row in rows:
        table.append("| " + " | ".join([str(cell).ljust(col_widths[i]) for i, cell in enumerate(row)]) + " |")
    
    table.append(separator)
    return "\n".join(table)

def get_system_info():
    sections = []
    
    # Header with timestamp
    sections.append(f"=== SYSTEM REPORT ===\nGenerated: {get_timestamp()}\n")
    
    # 1. System Overview
    sections.append(format_table("System Overview",
        ["Metric", "Value"],
        [
            ["OS", run_command("cat /etc/redhat-release")],
            ["Kernel", run_command("uname -r")],
            ["Uptime", run_command("uptime -p")],
            ["Load Avg", run_command("cat /proc/loadavg | awk '{print $1, $2, $3}'")]
        ]))
    
    # 2. CPU Information
    cpu_info = run_command("lscpu | grep -E 'Model name|Socket|Core|CPU MHz'")
    sections.append(format_table("CPU Information",
        ["Property", "Value"],
        [
            ["Model", run_command("lscpu | grep 'Model name' | cut -d: -f2 | sed 's/^[ \\t]*//'")],
            ["Sockets", run_command("lscpu | grep 'Socket(s)' | cut -d: -f2 | tr -d ' '")],
            ["Cores", run_command("lscpu | grep 'Core(s)' | cut -d: -f2 | tr -d ' '")],
            ["Threads", run_command("lscpu | grep 'CPU(s)' | head -1 | cut -d: -f2 | tr -d ' '")],
            ["Avg Freq", f"{run_command('lscpu | grep 'CPU MHz' | cut -d: -f2 | tr -d ' '")} MHz"]
        ]))
    
    # 3. Memory Usage
    mem_info = run_command("free -h | awk '/Mem:/ {print $2,$3,$4,$7}'").split()
    sections.append(format_table("Memory Usage (GB)",
        ["Total", "Used", "Free", "Available"],
        [mem_info]))
    
    # 4. Disk Information
    disk_rows = []
    for line in run_command("df -hT --output=source,fstype,size,used,avail,pcent,target").split('\n')[1:]:
        if line.strip():
            parts = line.split()
            disk_rows.append([parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]])
    
    sections.append(format_table("Disk Usage",
        ["Device", "Type", "Size", "Used", "Avail", "Use%", "Mounted"],
        disk_rows))
    
    # 5. Top Processes
    top_procs = []
    for line in run_command("ps -eo pid,user,%cpu,%mem,comm --sort=-%cpu | head -n 6").split('\n')[1:]:
        if line.strip():
            parts = line.split()
            top_procs.append([parts[0], parts[1], f"{parts[2]}%", f"{parts[3]}%", ' '.join(parts[4:])])
    
    sections.append(format_table("Top Processes by CPU",
        ["PID", "User", "CPU%", "Mem%", "Command"],
        top_procs))
    
    # 6. Services Status
    service_rows = []
    for line in run_command("systemctl list-units --type=service --state=running --no-pager | head -n 6").split('\n'):
        if line.strip():
            parts = line.split()[:4]
            service_rows.append([parts[0], parts[1], ' '.join(parts[2:])])
    
    sections.append(format_table("Running Services",
        ["Unit", "Load", "Active"],
        service_rows))
    
    # 7. Network Connections
    net_rows = []
    for line in run_command("ss -tulnp | head -n 6").split('\n')[1:]:
        if line.strip():
            parts = line.split()
            net_rows.append([parts[0], parts[4], parts[5]])
    
    sections.append(format_table("Network Connections",
        ["Type", "Local Address", "Process"],
        net_rows))
    
    return "\n\n".join(sections)

def save_to_file(content, filename=None):
    if not filename:
        filename = f"system_report_table_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(filename, 'w') as f:
        f.write(content)
    
    return filename

def main():
    print("Generating tabular system report...")
    start_time = time.time()
    
    report = get_system_info()
    output_file = save_to_file(report)
    
    print(f"\nReport generated in {time.time()-start_time:.2f} seconds")
    print(f"Saved to: {os.path.abspath(output_file)}")
    print("\n=== REPORT PREVIEW ===")
    print('\n'.join(report.split('\n')[:30]) + "\n...")

if __name__ == "__main__":
    main()
