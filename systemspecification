#!/usr/bin/env python3
import os
import subprocess
import time
from datetime import datetime

def get_timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def run_command(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
                              text=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"Error running command: {e}\n{e.stderr}"

def get_system_info():
    info = []
    
    # Header with timestamp
    info.append(f"=== Red Hat System Report === {get_timestamp()}\n")
    
    # 1. System overview
    info.append("\n=== System Overview ===\n")
    info.append(run_command("cat /etc/redhat-release"))
    info.append(run_command("uname -a"))
    
    # 2. Top processes
    info.append("\n=== Top Processes ===\n")
    info.append(run_command("top -b -n 1 | head -n 20"))
    
    # 3. Service status (using systemctl)
    info.append("\n=== Service Status ===\n")
    info.append(run_command("systemctl list-units --type=service --state=running"))
    info.append("\n=== Failed Services ===\n")
    info.append(run_command("systemctl --failed"))
    
    # 4. CPU utilization (specific to RHEL)
    info.append("\n=== CPU Utilization ===\n")
    info.append(run_command("mpstat -P ALL 1 1"))
    info.append(run_command("lscpu"))
    info.append("\n=== CPU Frequency ===\n")
    info.append(run_command("cpupower frequency-info"))
    
    # 5. Memory usage
    info.append("\n=== Memory Usage ===\n")
    info.append(run_command("free -h"))
    info.append("\n=== Huge Pages ===\n")
    info.append(run_command("cat /proc/meminfo | grep -i huge"))
    
    # 6. Disk utilization (with LVM info)
    info.append("\n=== Disk Usage ===\n")
    info.append(run_command("df -hT"))
    info.append("\n=== LVM Information ===\n")
    info.append(run_command("pvs"))
    info.append(run_command("vgs"))
    info.append(run_command("lvs"))
    
    # 7. Large directories (RHEL specific locations)
    info.append("\n=== Large Directories ===\n")
    major_dirs = ["/", "/home", "/var", "/var/log", "/opt", "/usr"]
    for directory in major_dirs:
        if os.path.exists(directory):
            info.append(f"\n--- {directory} ---\n")
            info.append(run_command(f"du -sh {directory}/* 2>/dev/null | sort -rh | head -n 20"))
    
    # 8. Network connections (RHEL specific)
    info.append("\n=== Network Connections ===\n")
    info.append(run_command("ss -tulnp"))
    info.append("\n=== Firewall Status ===\n")
    info.append(run_command("sudo firewall-cmd --state"))
    info.append(run_command("sudo firewall-cmd --list-all"))
    
    # 9. SELinux status
    info.append("\n=== SELinux Status ===\n")
    info.append(run_command("sestatus"))
    
    # 10. YUM/DNF updates
    info.append("\n=== Available Updates ===\n")
    if os.path.exists("/usr/bin/dnf"):
        info.append(run_command("sudo dnf check-update"))
    else:
        info.append(run_command("sudo yum check-update"))
    
    # 11. Uptime and load average
    info.append("\n=== System Uptime ===\n")
    info.append(run_command("uptime"))
    info.append(run_command("cat /proc/loadavg"))
    
    # 12. Kernel messages
    info.append("\n=== Kernel Messages ===\n")
    info.append(run_command("journalctl -k --since '1 hour ago' | tail -n 30"))
    
    return "\n".join(info)

def save_to_file(content, filename=None):
    if not filename:
        filename = f"rhel_system_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(filename, 'w') as f:
        f.write(content)
    
    return filename

def main():
    print("Collecting Red Hat system information...")
    report = get_system_info()
    
    output_file = save_to_file(report)
    print(f"Report saved to: {os.path.abspath(output_file)}")
    
    # Print summary to console
    print("\n=== Report Summary ===")
    print(f"Generated at: {get_timestamp()}")
    print(f"File size: {os.path.getsize(output_file)} bytes")

if __name__ == "__main__":
    main()
