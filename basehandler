#!/usr/bin/env python3
"""
Base Handler Class for AI Assistant
Provides common interface and functionality for all handlers
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class BaseHandler(ABC):
    """Abstract base class for all query handlers"""
    
    def __init__(self, name: str, llm=None):
        self.name = name
        self.llm = llm
        self.initialized = False
        self.logger = logger
    
    @abstractmethod
    def initialize(self) -> bool:
        """Initialize the handler (database connections, file loading, etc.)"""
        pass
    
    @abstractmethod
    def can_handle(self, question: str) -> bool:
        """Check if this handler can process the given question"""
        pass
    
    @abstractmethod
    def process_query(self, question: str) -> str:
        """Process the query and return response"""
        pass
    
    @abstractmethod
    def get_patterns(self) -> List[str]:
        """Return regex patterns that this handler can match"""
        pass
    
    @abstractmethod
    def get_keywords(self) -> List[str]:
        """Return keywords that this handler responds to"""
        pass
    
    def cleanup(self):
        """Clean up resources (override if needed)"""
        pass
    
    def get_status(self) -> Dict[str, Any]:
        """Get handler status information"""
        return {
            "name": self.name,
            "initialized": self.initialized,
            "type": self.__class__.__name__
        }
    
    def log_error(self, message: str, exception: Exception = None):
        """Log error with consistent format"""
        if exception:
            self.logger.error(f"{self.name}: {message}", exc_info=True)
        else:
            self.logger.error(f"{self.name}: {message}")
    
    def log_info(self, message: str):
        """Log info with consistent format"""
        self.logger.info(f"{self.name}: {message}")
