import os
import re
import subprocess
import pymysql
import paramiko
import pandas as pd
from langchain_ollama import OllamaLLM

# ---------------- Configuration ----------------

DB_CONFIGS = {
    "process": {
        "table": "FarDetailsAll",
        "db": {"host": "localhost", "user": "root", "password": "root123", "database": "EIS_n"},
    },
    "system": {
        "table": "metrics",
        "db": {"host": "localhost", "user": "ray", "password": "", "database": "system_monitor_db"},
    },
    "team": {
        "table": "UserMaster",
        "db": {"host": "localhost", "user": "root", "password": "root123", "database": "EIS"},
    }
}

SAFE_COMMANDS = {
    "cpu": "top -bn1 | head -n 10",
    "memory": "free -m",
    "disk": "df -h",
    "uptime": "uptime",
    "load": "uptime",
    "ps": "ps aux"
}

BLOCKED_PATTERNS = [
    r"\brm\b", r"\bkill\b", r"\breboot\b", r"\bshutdown\b", r"\buserdel\b",
    r"\bpasswd\b", r"\bmkfs\b", r"\bwget\b", r"\bcurl\b", r":\s*(){:|:&};:"
]

# SSH CONFIG (extend with key-based auth if needed)
SSH_USERNAME = "your_user"
SSH_PASSWORD = "your_password"

# ---------------- Utility Functions ----------------

def is_dangerous(text: str) -> bool:
    return any(re.search(pattern, text.lower()) for pattern in BLOCKED_PATTERNS)

def detect_topic(question: str) -> str:
    question = question.lower()
    if re.search(r"\b(team|user|employee)\b", question):
        return "team"
    elif re.search(r"\b(cpu|disk|memory|uptime|load|ps)\b", question):
        return "system-command"
    elif re.search(r"\b(process|pid|usage)\b", question):
        return "process"
    elif re.search(r"\b(\d{1,3}(?:\.\d{1,3}){3})\b", question):
        return "remote-host"
    return "team"

def run_local_command(command: str) -> str:
    try:
        return subprocess.getoutput(command)
    except Exception as e:
        return f"Error executing local command: {e}"

def run_remote_command(host: str, command: str) -> str:
    if is_dangerous(command):
        return "Blocked: Unsafe command."
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname=host, username=SSH_USERNAME, password=SSH_PASSWORD)
        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode()
        client.close()
        return output.strip()
    except Exception as e:
        return f"SSH Error: {e}"

def read_table(category: str, limit=50) -> pd.DataFrame:
    config = DB_CONFIGS[category]
    conn = pymysql.connect(**config["db"])
    df = pd.read_sql(f"SELECT * FROM `{config['table']}` LIMIT {limit}", conn)
    conn.close()
    return df

def ask_llm(prompt: str) -> str:
    llm = OllamaLLM(model="mistral:7b-instruct-q4_K_M", temperature=0)
    return llm.invoke(prompt)

# ---------------- Core Logic ----------------

def ask_question(question: str):
    if is_dangerous(question):
        print("Blocked: Unsafe or dangerous content.")
        return

    topic = detect_topic(question)

    if topic == "system-command":
        for key, cmd in SAFE_COMMANDS.items():
            if re.search(rf"\b{key}\b", question.lower()):
                output = run_local_command(cmd)
                context = f"Command output:\n{output}\n\nQuestion:\n{question}"
                print(ask_llm(context))
                return
        print("No safe system command matched.")
        return

    elif topic == "remote-host":
        ip_match = re.search(r"\b(\d{1,3}(?:\.\d{1,3}){3})\b", question)
        if ip_match:
            host = ip_match.group(1)
            command = "ps aux"
            output = run_remote_command(host, command)
            context = f"Remote ({host}) process output:\n{output[:1000]}\n\nQuestion:\n{question}"
            print(ask_llm(context))
        else:
            print("No valid IP address found.")
        return

    elif topic in DB_CONFIGS:
        try:
            df = read_table(topic)
            context = f"Sample data from `{DB_CONFIGS[topic]['table']}`:\n{df.head(10).to_markdown(index=False)}\n\nQuestion:\n{question}"
            print(ask_llm(context))
        except Exception as e:
            print(f"Database Error: {e}")
        return

    print("Could not determine how to handle this query.")

# ---------------- CLI Interface ----------------

def main():
    os.system("clear" if os.name != "nt" else "cls")
    print("Unified AI CLI Assistant")
    print("Type your question. Type 'exit' to quit.\n")

    while True:
        try:
            q = input("Your Question > ").strip()
            if q.lower() in ["exit", "quit"]:
                break
            if q:
                ask_question(q)
        except KeyboardInterrupt:
            print("\nInterrupted. Exiting.")
            break

if __name__ == "__main__":
    main()
