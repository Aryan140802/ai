# unified_ai_assistant.py

import os
import subprocess
import pymysql
import pandas as pd
from langchain_ollama import OllamaLLM

# --- CONFIG ---

DB_CONFIGS = {
    "process": {
        "table": "FarDetailsAll",
        "db": {"host": "localhost", "user": "root", "password": "root123", "database": "EIS_n"},
    },
    "system": {
        "table": "metrics",
        "db": {"host": "localhost", "user": "ray", "password": "", "database": "system_monitor_db"},
    },
    "team": {
        "table": "UserMaster",
        "db": {"host": "localhost", "user": "root", "password": "root123", "database": "EIS"},
    }
}

SAFE_COMMANDS = {
    "cpu": "top -bn1 | head -n 10",
    "memory": "free -m",
    "disk": "df -h",
    "uptime": "uptime",
    "load": "uptime",
    "ps": "ps aux",
}

BLOCKED_WORDS = ["rm", "kill", "reboot", "shutdown", "userdel", "passwd", "mkfs", "wget", "curl"]

# --- UTILS ---

def is_dangerous(q: str) -> bool:
    return any(word in q.lower() for word in BLOCKED_WORDS)

def detect_topic(q: str) -> str:
    if any(word in q.lower() for word in ["team", "user", "employee"]):
        return "team"
    elif any(word in q.lower() for word in ["cpu", "disk", "uptime", "load", "memory"]):
        return "system-command"
    elif any(word in q.lower() for word in ["process", "pid", "cpu usage"]):
        return "process"
    elif any(word in q.lower() for word in SAFE_COMMANDS):
        return "system-command"
    return "team"  # fallback

def run_command(command: str) -> str:
    try:
        return subprocess.getoutput(command)
    except Exception as e:
        return f"❌ Error running command: {e}"

def read_table(category: str, limit=100) -> pd.DataFrame:
    db_cfg = DB_CONFIGS[category]["db"]
    table = DB_CONFIGS[category]["table"]
    conn = pymysql.connect(**db_cfg)
    df = pd.read_sql(f"SELECT * FROM `{table}` LIMIT {limit}", conn)
    conn.close()
    return df

def ask_llm(prompt: str) -> str:
    llm = OllamaLLM(model="mistral:7b-instruct-q4_K_M", temperature=0)
    return llm.invoke(prompt)

def ask_question(q: str):
    if is_dangerous(q):
        print("⛔ Dangerous request detected. Operation blocked.")
        return

    topic = detect_topic(q)

    if topic == "system-command":
        # Try to pick relevant safe command
        for key, cmd in SAFE_COMMANDS.items():
            if key in q.lower():
                output = run_command(cmd)
                context = f"Command Output:\n{output}\n\nQuestion:\n{q}"
                print("🤖 Thinking...\n")
                print("📢", ask_llm(context))
                return
        print("❌ No safe system command matched.")
        return

    elif topic in DB_CONFIGS:
        try:
            df = read_table(topic)
            context = f"Here is a sample of the '{DB_CONFIGS[topic]['table']}' table:\n\n{df.head(10).to_markdown(index=False)}\n\nAnswer this:\n{q}"
            print("🤖 Thinking...\n")
            print("📢", ask_llm(context))
        except Exception as e:
            print(f"❌ DB Error: {e}")
    else:
        print("❌ Could not classify your question. Try rephrasing.")

# --- CLI LOOP ---

def main():
    os.system("clear" if os.name != "nt" else "cls")
    print("🧠 Unified AI CLI Assistant (type any question)")
    print("--------------------------------------------------")
    print("Examples:")
    print("  - How many processes are running?")
    print("  - Show users in the Portal team")
    print("  - What is current CPU usage?")
    print("  - What's the system uptime?")
    print("Type 'exit' to quit.\n")

    while True:
        try:
            q = input("❓ You: ").strip()
            if q.lower() in ["exit", "quit"]:
                print("👋 Bye!")
                break
            elif q:
                ask_question(q)
        except KeyboardInterrupt:
            print("\n👋 Interrupted. Exiting.")
            break

if __name__ == "__main__":
    main()
